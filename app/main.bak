package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"net/http"
	"os"
	"strings"
	"sync"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
)

type GuestbookEntry struct {
	Name    string `json:"name"`
	Message string `json:"message"`
}

var (
	forbiddenWords []string
	mu             sync.Mutex
	tpl            = template.Must(template.New("guestbook").Parse(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>Guestbook</title>
        </head>
        <body>
            <h1>Guestbook</h1>
            <form action="/sign" method="POST">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" required>
                <label for="message">Message:</label>
                <textarea id="message" name="message" required></textarea>
                <button type="submit">Sign</button>
            </form>
            <h2>Entries:</h2>
            <ul>
                {{range .}}
                    <li><strong>{{.Name}}:</strong> {{.Message}}</li>
                {{end}}
            </ul>
        </body>
        </html>
    `))
	sess = session.Must(session.NewSession(&aws.Config{
		Region: aws.String(os.Getenv("AWS_REGION")),
	}))
	svc       = dynamodb.New(sess)
	tableName = os.Getenv("DYNAMODB_TABLE")
)

func guestbookHandler(w http.ResponseWriter, r *http.Request) {
	scanInput := &dynamodb.ScanInput{
		TableName: aws.String(tableName),
	}

	result, err := svc.Scan(scanInput)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	var entries []GuestbookEntry
	err = dynamodbattribute.UnmarshalListOfMaps(result.Items, &entries)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	mu.Lock()
	defer mu.Unlock()
	tpl.Execute(w, entries)
}

func signHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
		return
	}

	name := r.FormValue("name")
	message := r.FormValue("message")

	if isBadName(name) || isExplicitMessage(message) {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	entry := GuestbookEntry{Name: name, Message: message}
	av, err := dynamodbattribute.MarshalMap(entry)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	input := &dynamodb.PutItemInput{
		Item:      av,
		TableName: aws.String(tableName),
	}

	_, err = svc.PutItem(input)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	http.Redirect(w, r, "/", http.StatusFound)
}

func fetchForbiddenWords(url string) ([]string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch data: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to fetch data: status code %d", resp.StatusCode)
	}

	var words []string
	if err := json.NewDecoder(resp.Body).Decode(&words); err != nil {
		return nil, fmt.Errorf("failed to decode data: %v", err)
	}

	return words, nil
}

func isBadName(name string) bool {
	for _, word := range forbiddenWords {
		if strings.Contains(strings.ToLower(name), word) {
			return true
		}
	}
	return false
}

func isExplicitMessage(message string) bool {
	for _, word := range forbiddenWords {
		if strings.Contains(strings.ToLower(message), word) {
			return true
		}
	}
	return false
}

func main() {
	var err error
	forbiddenWords, err = fetchForbiddenWords("https://raw.githubusercontent.com/zacanger/profane-words/master/words.json")
	if err != nil {
		panic(err)
	}

	http.HandleFunc("/", guestbookHandler)
	http.HandleFunc("/sign", signHandler)
	http.ListenAndServe(":8080", nil)
}
